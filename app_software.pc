/*
 * 
 * Marco Martínez Sónchez (marco.msanchez@udc.es)
 * Juan Luis Filguieras Rilo (juan.filgueiras.rilo@udc.es)
 * Universidade da Coruña
 *
 * BDA - Curso 2018/19
 *
 * TGR BDA aplicado a unha empresa de desenvolvemento software.
 *
 */

#include<stdlib.h>
#include<stdio.h>
#include<string.h>




EXEC SQL INCLUDE SQLCA;

/*
 * Utilidades para menús e ler valores por teclado. 
 * En "teclado.c" están repetidas con exemplos de uso 
 */
#define MAXLEN 20
void get_string(char *s, int maxlen){
	fgets(s,maxlen,stdin);
	int last = strlen(s) -1;
	if ( (s[last]=='\r') || (s[last]=='\n') )
		s[last] = '\0';
}

void get_password(char *s, int maxlen){
	system("stty -echo");
	get_string(s,maxlen);
	system("stty echo");
}

int get_int(){
	char s[MAXLEN];
	get_string(s,MAXLEN);
	return atoi(s);
}

long get_long(){
	char s[MAXLEN];
	get_string(s,MAXLEN);
	return atol(s);
}

float get_float(){
	char s[MAXLEN];
	get_string(s,MAXLEN);
	return atof(s);
}

int menu()
{
  int opcion = -1;

  int MAXOPTS = 15; /* Nómero de opcións do menó */

  printf("Menú da aplicación\n");
  printf("=========DESENVOLVEDORES=========\n\n");
  printf("1. Engadir desenvolvedor\n");
  printf("2. Borrar desenvolvedor\n");
  printf("3. Ver detalle de desenvolvedor\n");
  printf("4. Listar desenvolvedores\n");
  printf("5. Modificar salario\n");
  printf("=========PROXECTOS=========\n\n");
  printf("6. Engadir proxecto\n");
  printf("7. Nomear xefe de proxecto\n");
  printf("8. Modificar data de fin\n");
  printf("=========MÓDULOS=========\n\n");
  printf("9. Engadir módulo dun proxecto\n");
  printf("10. Borrar módulo dun proxecto\n");
  printf("11. Listar módulos\n");
  printf("=========EMPREGADOS=========\n\n");
  printf("12. Asignar empregado a módulo\n");
  printf("13. Desasignar empregado de módulo\n");
  printf("14. Buscar empregados por módulo\n");
  printf("15. Buscar empregados por proxecto\n");
  printf("16. Buscar xefes de proxecto\n");

  printf("0. Saír\n");

  while ( (opcion < 0) || (opcion > MAXOPTS)){
      printf("OP> ");
      opcion=get_long();
  }
  return opcion;
}

/* Funcionalidadess de base de datos */

void xestiona_erroconexion(){

	exec sql whenever sqlerror continue;
	switch(sqlca.sqlcode){
		case -1017:
		case -1005: printf("Erro conectando a Oracle\n\n");
			exit(-1);
		case -1012: printf("Erro desconectando de Oracle\n\n");
			break;
		default: 
			printf("Erro %d: %.*s\n",
			sqlca.sqlcode,
			sqlca.sqlerrm.sqlerrml, sqlca.sqlerrm.sqlerrmc);
	}
}

int xestiona_erroddl(char *taboa){
	exec sql whenever sqlerror continue;
	int cod = sqlca.sqlcode;
	switch(cod){
		case -955: printf("A táboa %s xa existe, non se crea\n", taboa);
			break;
		case -942: printf("A táboa %s non existe, non se borra\n", taboa);
			break;
	}
	return cod;
}


int xestiona_errodml(int do_rollback, char *taboa){
	exec sql whenever sqlerror continue;
	int cod = sqlca.sqlcode;
	switch(cod){
		case -1: printf("Xa existe un %s con ese código, non se crea.\n", taboa);
			break;
		default: 
			printf("Erro %d: %.*s\n",
			sqlca.sqlcode,
			sqlca.sqlerrm.sqlerrml, sqlca.sqlerrm.sqlerrmc);
	}

	if (do_rollback)
		exec sql rollback;

	return cod;
}

void conecta_bd(){
	exec sql whenever sqlerror do xestiona_erroconexion();
	exec sql begin declare section;	
	char usuario[30], clave[30];
	exec sql end declare section;

	printf("Conectando con Oracle...\n");
	printf("Usuario: "); get_string(usuario, 29);
	printf("Clave: "); get_password(clave, 29);

	EXEC SQL CONNECT :usuario IDENTIFIED BY :clave;

}

void desconecta_bd(){
	exec sql whenever sqlerror do xestiona_erroconexion();
	EXEC SQL COMMIT RELEASE;
	printf("Desconectado.\n");
}

void engadir_proxecto(){
	int erro;
	exec sql whenever sqlerror do erro = xestiona_errodml(1, "proxecto");

	exec sql begin declare section;
		int codigo;
		char nome[16];
		char dataIni[16];
		char dataFin[16];
		short dataFinInd;
	exec sql end declare section;

	printf("Codigo: "); codigo=get_int();
	printf("Nome: "); get_string(nome, 15);
	printf("Data de inicio: "); get_string(dataIni, 15);
	printf("Data de fin (opcional): "); get_string(dataIni, 15);
	dataFinInd = (dataFin[0] == '\n' || dataFin[0] == '\0') ? -1 : 0;


	exec sql insert into proxecto(cod_pro,nome,dataIni, dataFin)
		values(:codigo, :nome, :dataIni, :dataFin:dataFinInd);

	if (!erro){
		exec sql commit;
		printf("\nProxecto engadido.\n");
	}

}

void nomear_xefe_proxecto(){
	int erro;
	exec sql whenever sqlerror do erro = xestiona_errodml(1, "proxecto");

	exec sql begin declare section;
		int proxecto;
		int empregado;
	exec sql end declare section;

	printf("Codigo proxecto: "); proxecto=get_int();
	printf("Numero da Seguridade Social do empregado"); empregado=get_int();


	exec sql update proxecto set xefe_NSS = :empregado
		 where cod_pro = :proxecto;

	if (!erro){
		exec sql commit;
		printf("\nXefe engadido.\n");
	}
}


void modificar_data_fin(){
	int erro;
	exec sql whenever sqlerror do erro = xestiona_errodml(1, "proxecto");

	exec sql begin declare section;
		int proxecto;
		char dataFin[16];
	exec sql end declare section;

	printf("Codigo proxecto: "); proxecto=get_int();
	printf("Nova data de fin"); get_string(dataFin, 15);


	exec sql update proxecto set dataFin = :dataFin
		 where cod_pro = :proxecto;

	if (!erro){
		exec sql commit;
		printf("\nData modificada.\n");
	}
}

void engadir_modulo_proxecto(){
	int erro;
	exec sql whenever sqlerror do erro = xestiona_errodml(1, "modulo");

	exec sql begin declare section;
		int codigo;
		char nome[16];
		char tecnoloxia[16];
	exec sql end declare section;

	printf("Codigo do proxecto: "); codigo=get_int();
	printf("Nome do modulo: "); get_string(nome, 15);
	printf("TecnoloxÃ­a: "); get_string(tecnoloxia, 15);


	exec sql insert into modulo(cod_pro,nome,tecnoloxia)
		values(:codigo, :nome, :tecnoloxia);

	if (!erro){
		exec sql commit;
		printf("\nMÃ³dulo engadido.\n");
	}

}

void borrar_modulo_proxecto(){
	int erro;
	exec sql whenever sqlerror do erro = xestiona_errodml(1, "modulo");

	exec sql begin declare section;
		int codigo;
		char nome[16];
	exec sql end declare section;

	printf("Codigo do proxecto: "); codigo=get_int();
	printf("Nome do modulo: "); get_string(nome, 15);


	exec sql delete from modulo
		where nome = :nome and cod_pro = :codigo;

	if (!erro){
		exec sql commit;
		printf("\nMÃ³dulo eliminado.\n");
	}

}

void listar_modulos(){
	int erro;
	exec sql whenever sqlerror do erro = xestiona_errodml(1, "modulo");

	exec sql SET TRANSACTION READ ONLY;

	exec sql begin declare section;
		int codigo;
		char nome[16];
		char tecnoloxia[16];
	exec sql end declare section;

	exec sql declare c_mod cursor for
		select cod_pro, nome, tecnoloxia
			from modulo;
	
	EXEC SQL OPEN c_mod;
	EXEC SQL WHENEVER NOT FOUND DO BREAK;
	printf("\n\n");
	while(1){
		EXEC SQL FETCH c_mod INTO :codigo, :nome, :tecnoloxia;
		  printf("MODULO: \tProxecto: %d\tNome: %s\tTecnoloxia: %s.\n", 
				codigo,nome,tecnoloxia);
	}
	EXEC SQL WHENEVER NOT FOUND continue;
	printf("\nModulos atopados: %d\n", sqlca.sqlerrd[2]);
	EXEC SQL CLOSE c_mod;
	printf("\n\n");
	if (!erro)
		EXEC SQL COMMIT;

}

void asignar_empregado(){
	int erro;
	exec sql whenever sqlerror do erro = xestiona_errodml(1, "proxecto");

	exec sql begin declare section;
		int proxecto;
		char nome[16];
		int empregado;
	exec sql end declare section;

	printf("Codigo proxecto: "); proxecto=get_int();
	printf("Nome do modulo: "); get_string(nome, 15);
	printf("Numero da Seguridade Social do empregado"); empregado=get_int();


	exec sql update modulo set nss = :empregado
		 where cod_pro = :proxecto and nome = :nome;

	if (!erro){
		exec sql commit;
		printf("\nXefe engadido.\n");
	}
}


void desasignar_empregado(){
	int erro;
	exec sql whenever sqlerror do erro = xestiona_errodml(1, "proxecto");

	exec sql begin declare section;
		int proxecto;
		char nome[16];
		int empregado;
	exec sql end declare section;

	printf("Codigo proxecto: "); proxecto=get_int();
	printf("Nome do modulo: "); get_string(nome, 15);
	printf("Numero da Seguridade Social do empregado"); empregado=get_int();


	exec sql delete from modulo
		where nss = :empregado and cod_pro = :proxecto and nome = :nome;

	if (!erro){
		exec sql commit;
		printf("\nXefe engadido.\n");
	}
}

void engadir_desenvolvedor(){	
	int erro=0;
	exec sql whenever sqlerror do erro=xestiona_errodml(1,"desenvolvedor");

	exec sql begin declare section;
		long nss;
		char nome[30];
		float sal;
		short sal_ind=0;
		char tlf[20];
		char end[100];

	exec sql end declare section;

	printf("Número da Seguridade Social: "); nss=get_long();
	printf("Nome: "); get_string(nome, 20);
	printf("Salario (-1 = indefinido): "); sal=get_float();
	printf("Teléfono Móbil: "); get_string(tlf,10);
	printf("Enderezo: "); get_string(end,100);

	if (sal == -1) 
		sal_ind=-1;

	exec sql insert into desenvolvedor(nss,nome,salario,telefono,enderezo)
		values(:nss, :nome, :sal:sal_ind, :tlf, :end);

	if (!erro){
		exec sql commit;
		printf("\Desenvolvedor engadido.\n");
	}

}


void eliminar_desenvolvedor(){
	int erro=0;
	exec sql whenever sqlerror do erro=xestiona_errodml(1,"desenvolvedor");

	exec sql begin declare section;
		long nss;
	exec sql end declare section;

	printf("Eliminar desenvolvedor por NSS...: "); get_long(nss);

	exec sql delete from desenvolvedor
		where nss like :nss;

	if (!erro){
		if(sqlca.sqlerrd[2]) {
			printf("\nEmpregado eliminado.\n");
		} else {
			printf("\nNon se atopou o empregado.\n");
		}
		exec sql commit;
	}
}

void detalle_desenvolvedor(){
	int erro=0;
	exec sql whenever sqlerror do erro=xestiona_errodml(1,"desenvolvedor");

	exec sql begin declare section;
		long nss;
		char nome[30];
		float sal;
		short sal_ind=0;
		char tlf[20];
		char end[100];
	exec sql end declare section;

	printf("NSS: "); nss=get_long();

	exec sql select nome, sal, telefono, enderezo
			into :nome, :sal:sal_ind, :tlf, :end
			from desenvolvedor
			where nss = :nss;

	if (!erro){

		if (sqlca.sqlcode==1403)
			printf("Desenvolvedor inexistente.\n");
		else{
			if (sal_ind == -1)
				printf("Desenvolvedor: [%d, %s, --, %s, %s]\n", nss, nome, tlf, end);
			else
				printf("Desenvolvedor: [%d, %s, %g, %s, %s]\n", nss, nome, sal, tlf, end);
	
		}
		exec sql commit;
	}
}


void listar_desenvolvedores(){
	int erro=0;
	exec sql whenever sqlerror do erro=xestiona_errodml(1,"desenvolvedor");

	exec sql SET TRANSACTION READ ONLY;

	exec sql begin declare section;
		long nss;
		char nome[30];
		float sal;
		short sal_ind;
		char tlf[20];
		char end[100];
	exec sql end declare section;

	exec sql declare c_des cursor for
		select nss, nome, salario, telefono, enderezo
			from desenvolvedor;

	EXEC SQL OPEN c_des;
	EXEC SQL WHENEVER NOT FOUND DO BREAK;
	printf("\n\n");
	while(1){
		EXEC SQL FETCH c_des INTO :nss, :nome, :sal:sal_ind, tlf, end;
		if (sal_ind==0)
		     printf("DESENVOLVEDOR: \tCódigo: %d\tNome: %s\tPrezo: %g \tTeléfono Móbil: %s \tEnderezo: %s.\n", 
				nss,nome,sal,tlf,end);
		else
		     printf("DESENVOLVEDOR: \tCódigo: %d\tNome: %s\tPrezo descoñecido \tTeléfono Móbil: %s \tEnderezo: %s.\n", 
				nss,nome,tlf,end);
	}

	EXEC SQL WHENEVER NOT FOUND continue;
	printf("\Desenvolvedores atopados: %d\n", sqlca.sqlerrd[2]);
	EXEC SQL CLOSE c_des;
	printf("\n\n");
	if (!erro)
		EXEC SQL COMMIT;
}


void modificar_salario(){
	int erro=0;
	exec sql whenever sqlerror do erro=xestiona_errodml(1,"desenvolvedor");

	exec sql begin declare section;
		long nss;
		float novo_sal;
		float vello_sal; short vello_sal_ind;
	exec sql end declare section;

	printf("NSS: "); nss=get_long();

	exec sql select sal
		into :vello_sal:vello_sal_ind
		from desenvolvedor
		where nss = :nss;

	if(vello_sal_ind == 0) {
		printf("Salario actual do desenvolvedor: %g\n", vello_sal);
	} else {
		printf("O desenvolvedor non ten un salario asignado.\n");
	}
	printf("Modificar salario (-1 para deixalo igual): "); novo_sal=get_float();

	if (novo_sal != -1) {
	 	EXEC SQL SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

 		exec sql update desenvolvedor
			set sal = :novo_sal
			where nss=:nss;
	}
	
	if(!erro){
		if (sqlca.sqlerrd[2])   
			printf("Desenvolvedor con salario modificado\n");
		else
			printf("Desenvolvedor non atopado\n");
		exec sql commit;
	}

}

void buscar_xefes() {

	int erro=0;
	exec sql whenever sqlerror do erro=xestiona_errodml(1,"desenvolvedor");

	exec sql SET TRANSACTION READ ONLY;

	exec sql begin declare section;
		long nss;
		char nome[30];
		float sal;
		short sal_ind;
		char tlf[20];
		char end[100];
	exec sql end declare section;

	exec sql declare c_des cursor for
		select nss, nome, salario, telefono, enderezo
			from desenvolvedor d join proxecto p
			on d.nss = p.xefe_nss;

	EXEC SQL OPEN c_des;
	EXEC SQL WHENEVER NOT FOUND DO BREAK;
	printf("\n\n");
	while(1){
		EXEC SQL FETCH c_des INTO :nss, :nome, :sal:sal_ind, tlf, end;
		if (sal_ind==0)
		     printf("XEFE: \tCódigo: %d\tNome: %s\tPrezo: %g \tTeléfono Móbil: %s \tEnderezo: %s.\n", 
				nss,nome,sal,tlf,end);
		else
		     printf("XEFE: \tCódigo: %d\tNome: %s\tPrezo descoñecido \tTeléfono Móbil: %s \tEnderezo: %s.\n", 
				nss,nome,tlf,end);
	}
	EXEC SQL WHENEVER NOT FOUND continue;
	printf("\Xefes atopados: %d\n", sqlca.sqlerrd[2]);
	EXEC SQL CLOSE c_des;
	printf("\n\n");
	if (!erro)
		EXEC SQL COMMIT;
}

void buscar_empregados_por_proxecto() {

	int erro=0;
	exec sql whenever sqlerror do erro=xestiona_errodml(1,"desenvolvedor");

	exec sql SET TRANSACTION READ ONLY;

	exec sql begin declare section;
		int cod_pro;
		long nss;
		char nome[30];
		float sal;
		short sal_ind;
		char tlf[20];
		char end[100];
	exec sql end declare section;

	printf("Código proxecto: "); cod_pro=get_int();

	exec sql declare c_des cursor for
		select d.nss, d.nome, salario, telefono, enderezo
			from desenvolvedor d join des_mod dm
			on d.nss = dm.nss
			where cod_pro = :cod_pro;

	EXEC SQL OPEN c_des;
	EXEC SQL WHENEVER NOT FOUND DO BREAK;
	printf("\n\n");
	while(1){
		EXEC SQL FETCH c_des INTO :nss, :nome, :sal:sal_ind, tlf, end;
		if (sal_ind==0)
		     printf("XEFE: \tCódigo: %d\tNome: %s\tPrezo: %g \tTeléfono Móbil: %s \tEnderezo: %s.\n", 
				nss,nome,sal,tlf,end);
		else
		     printf("XEFE: \tCódigo: %d\tNome: %s\tPrezo descoñecido \tTeléfono Móbil: %s \tEnderezo: %s.\n", 
				nss,nome,tlf,end);
	}
	EXEC SQL WHENEVER NOT FOUND continue;
	printf("\Xefes atopados: %d\n", sqlca.sqlerrd[2]);
	EXEC SQL CLOSE c_des;
	printf("\n\n");
	if (!erro)
		EXEC SQL COMMIT;
}

void buscar_empregados_por_modulo() {

	int erro=0;
	exec sql whenever sqlerror do erro=xestiona_errodml(1,"desenvolvedor");

	exec sql SET TRANSACTION READ ONLY;

	exec sql begin declare section;
		int cod_pro;
		char nome_mod[16];
		long nss;
		char nome[30];
		float sal;
		short sal_ind;
		char tlf[20];
		char end[100];
	exec sql end declare section;

	printf("Código proxecto: "); cod_pro=get_int();
	printf("Nome módulo: "); get_string(nome_mod, 16);

	exec sql declare c_des cursor for
		select d.nss, d.nome, salario, telefono, enderezo
			from desenvolvedor d join des_mod dm
			on d.nss = dm.nss
			where cod_pro = :cod_pro
			and nome_mod like :nome_mod;

	EXEC SQL OPEN c_des;
	EXEC SQL WHENEVER NOT FOUND DO BREAK;
	printf("\n\n");
	while(1){
		EXEC SQL FETCH c_des INTO :nss, :nome, :sal:sal_ind, tlf, end;
		if (sal_ind==0)
		     printf("XEFE: \tCódigo: %d\tNome: %s\tPrezo: %g \tTeléfono Móbil: %s \tEnderezo: %s.\n", 
				nss,nome,sal,tlf,end);
		else
		     printf("XEFE: \tCódigo: %d\tNome: %s\tPrezo descoñecido \tTeléfono Móbil: %s \tEnderezo: %s.\n", 
				nss,nome,tlf,end);
	}
	EXEC SQL WHENEVER NOT FOUND continue;
	printf("\Xefes atopados: %d\n", sqlca.sqlerrd[2]);
	EXEC SQL CLOSE c_des;
	printf("\n\n");
	if (!erro)
		EXEC SQL COMMIT;
}

/* Función principal */
int main()
{
  conecta_bd();

  int op;

  while ( (op=menu()) != 0){
       switch(op){
            case 1: engadir_desenvolvedor(); break;
            case 2: eliminar_desenvolvedor(); break;
            case 3: detalle_desenvolvedor(); break;
            case 4: listar_desenvolvedores(); break;
            case 6: modificar_salario(); break;
            case 7: nomear_xefe_proxecto(); break;
            case 8: modificar_data_fin(); break;
            case 9: engadir_modulo_proxecto(); break;
            case 10: borrar_modulo_proxecto(); break;
            case 11: listar_modulos(); break;
            case 12: asignar_empregado(); break;
            case 13: desasignar_empregado(); break;
            case 14: buscar_empregados_por_modulo(); break;
            case 15: buscar_empregados_por_proxecto(); break;
            case 16: buscar_xefes(); break;
       }

  }
 


 desconecta_bd(); 

 return 0;
}



