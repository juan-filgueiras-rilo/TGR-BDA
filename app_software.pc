/*
 * 
 * Marco Martínez Sánchez (marco.msanchez@udc.es)
 * Juan Luis Filguieras Rilo (juan.filgueiras.rilo@udc.es)
 * Universidade da Coruña
 *
 * BDA - Curso 2018/19
 *
 * TGR BDA aplicado a unha empresa de desenvolvemento software.
 *
 */

#include<stdlib.h>
#include<stdio.h>
#include<string.h>
#include<ctype.h>



char *rtrim(char *s){
    char* back = s + strlen(s);
    while(isspace(*--back));
    *(back+1) = '\0';
    return s;
}



EXEC SQL INCLUDE SQLCA;

/*
 * Utilidades para men�s e ler valores por teclado. 
 * En "teclado.c" est�n repetidas con exemplos de uso 
 */
#define MAXLEN 20

#define format  "dd/mm/yyyy"

#define NOVALIDATE 0
#define VALIDATE_NOT_NULL 1
#define VALIDATE_NUMBER 2
#define VALIDATE_POSITIVE 4
#define VALIDATE_DATE 8

int validateNotNull(char* data){
	char c = rtrim(data)[0];
	return (!isspace(c) && (c != '\0'));
}

int validateNumber(char* data){
	if (data[0] == '\n'){
		return 0;
	}
	int n = atoi(data);
	return (n || (data[0] == '0'));
}

int validatePositive(char* data){
	if (validateNumber(data)){
		return data[0] != '-';
	} else {
		return 0;
	}
}

int xestiona_errodml(int,char*);

int devuelveTrue(){
	//Necesario para detectar que ocurrio un error de forma sencilla
	return 1;
}

int validateDate(char* data){
	if (!validateNotNull(data)){
		return 1;
	}
	int erro=0;
	exec sql whenever sqlerror do erro = devuelveTrue();
	exec sql begin declare section;
		char* nData = data;
		char* nFormat = format;
		char result[30];
		short resultInd;
	exec sql end declare section;

	exec sql select TO_DATE(:data, :nFormat) into :result:resultInd from dual;

	if (!erro)
		return !(rtrim(result)[0] == '\0');
	else
	{
		return 0;
	}
	
}



int validate(char* data, int flags){
	if (flags & VALIDATE_NOT_NULL){
		validateNotNull(data);
	}
	if (flags & VALIDATE_NUMBER){
		validateNumber(data);
	}
	if (flags & VALIDATE_POSITIVE){
		validatePositive(data);
	}
	if (flags & VALIDATE_DATE){
		validateDate(data);
	}
}


void get_string(char *s, int maxlen, int validateFlags){
	int firstAttempt = 1;
	do {
		if (firstAttempt){
			firstAttempt = 0;
		} else {
			printf("Valor inválido, reintente: ");
		}
		fgets(s,maxlen,stdin);
		int last = strlen(s) -1;
		if ( (s[last]=='\r') || (s[last]=='\n') )
			s[last] = '\0';

	} while(!validate(s, validateFlags));
	
}

void get_password(char *s, int maxlen, int validateFlags){
	system("stty -echo");
	get_string(s,maxlen, validateFlags);
	system("stty echo");
}

int get_int(int validateFlags){
	char s[MAXLEN];
	get_string(s,MAXLEN, validateFlags);
	return atoi(s);
}

long get_long(int validateFlags){
	char s[MAXLEN];
	get_string(s,MAXLEN, validateFlags);
	return atol(s);
}

float get_float(int validateFlags){
	char s[MAXLEN];
	get_string(s,MAXLEN, validateFlags);
	return atof(s);
}

int get_option(){
	char s[MAXLEN];
	int firstOption = 1;
	while (1){
		if (firstOption){
			firstOption = 0;
		} else {
			printf("Opción inválida, reintente: \n");
		}
		get_string(s, MAXLEN, VALIDATE_NOT_NULL);
		switch (s[0]){
			case 'N': return 0;
			case 'S': return 1;
			default: continue;
		}
	}

}

void enterContinuar(){
	char s[2];
	printf("\nPulsa <ENTER> para continuar.\n");
	fgets(s, 2, stdin);
}

int menu()
{
  int opcion = -1;

  int MAXOPTS = 18; /* N�mero de opci�ns do men� */

  printf("Menú da aplicación\n");
  printf("=========DESENVOLVEDORES=========\n\n");
  printf("1. Engadir desenvolvedor\n");
  printf("2. Borrar desenvolvedor\n");
  printf("3. Ver detalle de desenvolvedor\n");
  printf("4. Listar desenvolvedores\n");
  printf("5. Modificar salario\n");
	printf("6. Incrementar salario\n");
  printf("=========PROXECTOS=========\n\n");
  printf("7. Engadir proxecto\n");
  printf("8. Nomear xefe de proxecto\n");
  printf("9. Modificar data de fin\n");
  printf("=========MÓDULOS=========\n\n");
  printf("10. Engadir módulo dun proxecto\n");
  printf("11. Borrar módulo dun proxecto\n");
  printf("12. Listar módulos\n");
  printf("=========EMPREGADOS=========\n\n");
  printf("13. Asignar empregado a módulo\n");
  printf("14. Desasignar empregado de módulo\n");
  printf("15. Buscar empregados por módulo\n");
  printf("16. Buscar empregados por proxecto\n");
  printf("17. Buscar xefes de proxecto\n");
	printf("18. Listar proxectos\n");

  printf("0. Saír\n");

  while ( (opcion < 0) || (opcion > MAXOPTS)){
      printf("OP> ");
      opcion=get_long(VALIDATE_NOT_NULL | VALIDATE_NUMBER);
  }
  return opcion;
}

/* Funcionalidadess de base de datos */

void xestiona_erroconexion(){

	exec sql whenever sqlerror continue;
	switch(sqlca.sqlcode){
		case -1017:
		case -1005: printf("Erro conectando a Oracle\n\n");
			exit(-1);
		case -1012: printf("Erro desconectando de Oracle\n\n");
			break;
		default: 
			printf("Erro %d: %.*s\n",
			sqlca.sqlcode,
			sqlca.sqlerrm.sqlerrml, sqlca.sqlerrm.sqlerrmc);
	}
}

int xestiona_erroddl(char *taboa){
	exec sql whenever sqlerror continue;
	int cod = sqlca.sqlcode;
	switch(cod){
		case -955: printf("A t�boa %s xa existe, non se crea\n", taboa);
			break;
		case -942: printf("A t�boa %s non existe, non se borra\n", taboa);
			break;
	}
	return cod;
}


int xestiona_errodml(int do_rollback, char *taboa){
	exec sql whenever sqlerror continue;
	int cod = sqlca.sqlcode;
	switch(cod){
		case -1: printf("Xa existe un %s con ese c�digo, non se crea.\n", taboa);
			break;
		default: 
			printf("Erro %d: %.*s\n",
			sqlca.sqlcode,
			sqlca.sqlerrm.sqlerrml, sqlca.sqlerrm.sqlerrmc);
	}

	if (do_rollback)
		exec sql rollback;

	return cod;
}

void conecta_bd(){
	exec sql whenever sqlerror do xestiona_erroconexion();
	exec sql begin declare section;	
	char usuario[30], clave[30];
	exec sql end declare section;

	printf("Conectando con Oracle...\n");
	printf("Usuario: "); get_string(usuario, 29, VALIDATE_NOT_NULL);
	printf("Clave: "); get_password(clave, 29, VALIDATE_NOT_NULL);

	EXEC SQL CONNECT :usuario IDENTIFIED BY :clave;

}

void desconecta_bd(){
	exec sql whenever sqlerror do xestiona_erroconexion();
	EXEC SQL COMMIT RELEASE;
	printf("Desconectado.\n");
}

void engadir_proxecto(){

	int erro=0;
	exec sql whenever sqlerror do erro = xestiona_errodml(1, "proxecto");

	exec sql begin declare section;
		int codigo;
		char nome[16];
		char dataIni[16];
		char dataFin[16];
		short dataFinInd;
		char* nFormat = format;
	exec sql end declare section;
	EXEC SQL SET TRANSACTION ISOLATION LEVEL READ COMMITTED;

	printf("Codigo: "); codigo=get_int(VALIDATE_NOT_NULL | VALIDATE_POSITIVE);
	printf("Nome: "); get_string(nome, 15, VALIDATE_NOT_NULL);
	printf("Data de inicio (%s): ", format); get_string(dataIni, 15, VALIDATE_DATE | VALIDATE_NOT_NULL);
	printf("Data de fin (opcional): "); get_string(dataFin, 15, VALIDATE_DATE);
	dataFinInd = (dataFin[0] == '\n' || dataFin[0] == '\0') ? -1 : 0;

	
	exec sql insert into proxecto(cod_pro,nome,dataIni, dataFin)
		values(:codigo, :nome, TO_DATE(:dataIni, :nFormat), TO_DATE(:dataFin:dataFinInd, :nFormat));

	if (!erro){
		exec sql commit;
		printf("\nProxecto engadido.\n");
		enterContinuar();
	}

}


void nomear_xefe_proxecto(){
	int erro=0;
	exec sql whenever sqlerror do erro = xestiona_errodml(1, "proxecto");

	exec sql begin declare section;
		int proxecto;
		int empregado;
	exec sql end declare section;

	printf("Codigo proxecto: "); proxecto=get_int(VALIDATE_POSITIVE);
	printf("Numero da Seguridade Social do empregado: "); empregado=get_int(VALIDATE_POSITIVE);

	EXEC SQL SET TRANSACTION ISOLATION LEVEL READ COMMITTED;

	exec sql update proxecto set xefe_nss = :empregado
		 where cod_pro = :proxecto;

	if (!erro){
		exec sql commit;
		printf("\nXefe engadido.\n");
		enterContinuar();
	}
}


void modificar_data_fin(){
	int erro=0;
	exec sql whenever sqlerror do erro = xestiona_errodml(1, "proxecto");

	exec sql begin declare section;
		int proxecto;
		char dataFin[16];
	exec sql end declare section;

	printf("Codigo proxecto: "); proxecto=get_int(VALIDATE_POSITIVE);
	printf("Nova data de fin: "); get_string(dataFin, 15, VALIDATE_DATE);


	EXEC SQL SET TRANSACTION ISOLATION LEVEL READ COMMITTED;
	exec sql update proxecto set dataFin = :dataFin
		 where cod_pro = :proxecto;

	if (!erro){
		exec sql commit;
		printf("\nData modificada.\n");
		enterContinuar();
	}
}

void listar_desenvolvedores(int attach);

void engadir_modulo_proxecto(){
	int erro=0;
	exec sql whenever sqlerror do erro = xestiona_errodml(1, "modulo");

	exec sql begin declare section;
		int codigo;
		char nome[16];
		char tecnoloxia[16];
		long nss;
	exec sql end declare section;

	printf("Codigo do proxecto: "); codigo=get_int(VALIDATE_POSITIVE);
	printf("Nome do modulo: "); get_string(nome, 15, VALIDATE_NOT_NULL);
	printf("Tecnoloxía: "); get_string(tecnoloxia, 15, VALIDATE_NOT_NULL);

	EXEC SQL SET TRANSACTION ISOLATION LEVEL READ COMMITTED;
	exec sql insert into modulo(cod_pro,nome,tecnoloxia)
		values(:codigo, :nome, :tecnoloxia);

	int option;
	
	printf("Deseas engadir algun desenvolvedor ao módulo? (S / N): "); option = get_option();
	exec sql whenever sqlerror do erro = xestiona_errodml(1, "des_mod");
	if (option){
		listar_desenvolvedores(1);
	}
	while (option){
		
		

		printf("NSS: "); nss = get_long(VALIDATE_NOT_NULL | VALIDATE_POSITIVE);
		
		exec sql insert into des_mod(cod_pro, nome, nss)
			values(:codigo, :nome, :nss);
		
		printf("Deseas engadir outro desenvolvedor ao módulo? (S / N): "); option = get_option();

	}
	exec sql whenever sqlerror do erro = xestiona_errodml(1, "modulo");




	if (!erro){
		exec sql commit;
		printf("\nMódulo engadido.\n");
		enterContinuar();
	}

}

void borrar_modulo_proxecto(){
	int erro=0;
	exec sql whenever sqlerror do erro = xestiona_errodml(1, "modulo");

	exec sql begin declare section;
		int codigo;
		char nome[16];
	exec sql end declare section;

	printf("Codigo do proxecto: "); codigo=get_int(VALIDATE_POSITIVE);
	printf("Nome do modulo: "); get_string(nome, 15, VALIDATE_NOT_NULL);

	EXEC SQL SET TRANSACTION ISOLATION LEVEL READ COMMITTED;

	exec sql delete from modulo
		where nome = :nome and cod_pro = :codigo;

	if (!erro){
		exec sql commit;
		printf("\nMódulo eliminado.\n");
		enterContinuar();
	}

}

void listar_modulos(){
	int erro=0;
	exec sql whenever sqlerror do erro = xestiona_errodml(1, "modulo");

	exec sql SET TRANSACTION READ ONLY;

	exec sql begin declare section;
		int codigo;
		char nome[16];
		char tecnoloxia[16];
	exec sql end declare section;

	exec sql declare c_mod cursor for
		select cod_pro, nome, tecnoloxia
			from modulo;
	
	EXEC SQL OPEN c_mod;
	EXEC SQL WHENEVER NOT FOUND DO BREAK;
	printf("\n\n");
	printf("+----------+------------------+------------------+\n");
	printf("| Proxecto |       Nome       |    Tecnoloxía    |\n");
	printf("+----------+------------------+------------------+\n");
	while(1){
		EXEC SQL FETCH c_mod INTO :codigo, :nome, :tecnoloxia;
		  printf("| %8d | %16.16s | %16.16s |\n", 
				codigo,nome,tecnoloxia);
	}
	EXEC SQL WHENEVER NOT FOUND continue;
	printf("+----------+------------------+------------------+\n");
	printf("\nModulos atopados: %d\n", sqlca.sqlerrd[2]);
	EXEC SQL CLOSE c_mod;
	printf("\n\n");
	if (!erro){
		EXEC SQL COMMIT;
		enterContinuar();
	}
		

}

void asignar_empregado(){
	int erro=0;
	exec sql whenever sqlerror do erro = xestiona_errodml(1, "desenvolvedor en módulo");

	exec sql begin declare section;
		int proxecto;
		char nome[16];
		int empregado;
	exec sql end declare section;

	printf("Codigo proxecto: "); proxecto=get_int(VALIDATE_POSITIVE);
	printf("Nome do modulo: "); get_string(nome, 15, VALIDATE_NOT_NULL);
	printf("Numero da Seguridade Social do empregado: "); empregado=get_int(VALIDATE_POSITIVE);


	EXEC SQL SET TRANSACTION ISOLATION LEVEL READ COMMITTED;
	exec sql insert into des_mod(cod_pro,nome,nss) 
		 values (:proxecto,:nome,:empregado);

	if (!erro){
		exec sql commit;
		printf("\nEmpregado engadido.\n");
		enterContinuar();
	}
}


void desasignar_empregado(){
	int erro=0;
	exec sql whenever sqlerror do erro = xestiona_errodml(1, "desenvolvedor en módulo");

	exec sql begin declare section;
		int proxecto;
		char nome[16];
		int empregado;
	exec sql end declare section;

	printf("Codigo proxecto: "); proxecto=get_int(VALIDATE_POSITIVE);
	printf("Nome do modulo: "); get_string(nome, 15, VALIDATE_NOT_NULL);
	printf("Numero da Seguridade Social do empregado: "); empregado=get_int(VALIDATE_POSITIVE);

	EXEC SQL SET TRANSACTION ISOLATION LEVEL READ COMMITTED;

	exec sql delete from des_mod
		where nss = :empregado and cod_pro = :proxecto and nome = :nome;

	if (!erro){
		exec sql commit;
		printf("\nEmpregado desasignado.\n");
		enterContinuar();
	}
}

void engadir_desenvolvedor(){	
	int erro=0;
	exec sql whenever sqlerror do erro=xestiona_errodml(1,"desenvolvedor");

	exec sql begin declare section;
		long nss;
		char nome[30];
		float sal;
		short sal_ind=0;
		char tlf[20];
		char end[100];

	exec sql end declare section;

	printf("Número da Seguridade Social: "); nss=get_long(VALIDATE_POSITIVE | VALIDATE_NOT_NULL);
	printf("Nome: "); get_string(nome, 20, VALIDATE_NOT_NULL);
	printf("Salario (opcional): "); sal=get_float(VALIDATE_POSITIVE | VALIDATE_NOT_NULL);
	printf("Teléfono Móbil: "); get_string(tlf,19, VALIDATE_NOT_NULL);
	printf("Enderezo: "); get_string(end,99, VALIDATE_NOT_NULL);

	if (sal == -1) 
		sal_ind=-1;

	EXEC SQL SET TRANSACTION ISOLATION LEVEL READ COMMITTED;

	exec sql insert into desenvolvedor(nss,nome,salario,telefono,enderezo)
		values(:nss, :nome, :sal:sal_ind, :tlf, :end);

	if (!erro){
		exec sql commit;
		printf("\nDesenvolvedor engadido.\n");
		enterContinuar();
	}

}


void eliminar_desenvolvedor(){
	int erro=0;
	exec sql whenever sqlerror do erro=xestiona_errodml(1,"desenvolvedor");

	exec sql begin declare section;
		long nss;
	exec sql end declare section;

	printf("Eliminar desenvolvedor por NSS...: "); nss = get_long(VALIDATE_NOT_NULL | VALIDATE_POSITIVE);

	EXEC SQL SET TRANSACTION ISOLATION LEVEL READ COMMITTED;
	exec sql delete from desenvolvedor
		where nss = :nss;

	if (!erro){
		if(sqlca.sqlerrd[2]) {
			printf("\nEmpregado eliminado.\n");
		} else {
			printf("\nNon se atopou o empregado.\n");
		}
		exec sql commit;
		enterContinuar();
	}
}

void detalle_desenvolvedor(){
	int erro=0;
	exec sql whenever sqlerror do erro=xestiona_errodml(1,"desenvolvedor");

	exec sql begin declare section;
		long nss;
		char nome[30];
		float sal;
		short sal_ind=0;
		char tlf[20];
		char end[100];
	exec sql end declare section;

	printf("NSS: "); nss=get_long(VALIDATE_POSITIVE | VALIDATE_NOT_NULL);

	EXEC SQL SET TRANSACTION ISOLATION LEVEL READ COMMITTED;
	exec sql select nome, salario, telefono, enderezo
			into :nome, :sal:sal_ind, :tlf, :end
			from desenvolvedor
			where nss = :nss;

	if (!erro){

		if (sqlca.sqlcode==1403)
			printf("Desenvolvedor inexistente.\n");
		else{
		if (sal_ind==0)
		     printf("| %6ld | %10.10s | %11g | %14.14s | %20.20s. |\n", 
				nss,rtrim(nome),sal,rtrim(tlf),rtrim(end));
		else
		     printf("| %6ld | %10.10s | Sen salario | %14.14s | %20.20s. |\n", 
				nss,rtrim(nome),rtrim(tlf),rtrim(end));
	
		}
		exec sql commit;
		enterContinuar();
	}
}


void listar_desenvolvedores(int attach){
	int erro=0;
	exec sql whenever sqlerror do erro=xestiona_errodml(1,"desenvolvedor");

	if (!attach)
		exec sql SET TRANSACTION READ ONLY;

	exec sql begin declare section;
		long nss;
		char nome[30];
		float sal;
		short sal_ind;
		char tlf[20];
		char end[100];
	exec sql end declare section;

	exec sql declare c_des cursor for
		select nss, nome, salario, telefono, enderezo
			from desenvolvedor;

	EXEC SQL OPEN c_des;
	EXEC SQL WHENEVER NOT FOUND DO break;
	printf("\n\n");
	printf("+--------+------------+-------------+----------------+-----------------------+\n");
	printf("|  NSS   |    Nome:   |   Salario   | Teléfono Móbil |       Enderezo        |\n");
	printf("+--------+------------+-------------+----------------+-----------------------+\n");

	while(1){
		EXEC SQL FETCH c_des INTO :nss, :nome, :sal:sal_ind, tlf, end;
		if (sal_ind==0)
		     printf("| %6ld | %10.10s | %11g | %14.14s | %20.20s. |\n", 
				nss,rtrim(nome),sal,rtrim(tlf),rtrim(end));
		else
		     printf("| %6ld | %10.10s | Sen salario | %14.14s | %20.20s. |\n", 
				nss,rtrim(nome),rtrim(tlf),rtrim(end));
	}

	EXEC SQL WHENEVER NOT FOUND continue;
	printf("+--------+------------+-------------+----------------+-----------------------+\n");
	printf("\nDesenvolvedores atopados: %d\n", sqlca.sqlerrd[2]);
	EXEC SQL CLOSE c_des;
	printf("\n\n");
	if ((!erro) && (!attach)){
		EXEC SQL COMMIT;
		enterContinuar();
	}
		
}



void modificar_salario(){
	int erro=0;
	exec sql whenever sqlerror do erro=xestiona_errodml(1,"desenvolvedor");

	exec sql begin declare section;
		long nss;
		float novo_sal;
		float vello_sal; short vello_sal_ind;
	exec sql end declare section;

	printf("NSS: "); nss=get_long(VALIDATE_POSITIVE | VALIDATE_NOT_NULL);
	EXEC SQL SET TRANSACTION ISOLATION LEVEL READ COMMITTED;

	exec sql select salario
		into :vello_sal:vello_sal_ind
		from desenvolvedor
		where nss = :nss;

	if (sqlca.sqlerrd[2] <= 0){
		printf("Non se atopou o desenvolvedor na base de datos\n");
		exec sql rollback;
		enterContinuar();
		return;
	}
	if (vello_sal_ind == 0) {
		printf("Salario actual do desenvolvedor: %g\n", vello_sal);
	} else {
		printf("O desenvolvedor non ten un salario asignado.\n");
	}
	printf("Modificar salario (opcional): "); novo_sal=get_float(VALIDATE_POSITIVE);

	if (novo_sal != -1) {
	 	

 		exec sql update desenvolvedor
			set salario = :novo_sal
			where nss=:nss;
	}
	
	if(!erro){
		if (sqlca.sqlerrd[2])   
			printf("Desenvolvedor con salario modificado\n");
		else
			printf("Desenvolvedor non atopado\n");
		exec sql commit;
		enterContinuar();
	}

}

void modificar_salario_relativo(){
	int erro=0;
	exec sql whenever sqlerror do erro=xestiona_errodml(1,"desenvolvedor");

	exec sql begin declare section;
		long nss;
		float novo_sal;
		float vello_sal; short vello_sal_ind;
	exec sql end declare section;

	printf("NSS: "); nss=get_long(VALIDATE_POSITIVE | VALIDATE_NOT_NULL);
	EXEC SQL SET TRANSACTION ISOLATION LEVEL READ COMMITTED;

	exec sql select salario
		into :vello_sal:vello_sal_ind
		from desenvolvedor
		where nss = :nss;

	if (sqlca.sqlerrd[2] <= 0){
		printf("Non se atopou o desenvolvedor na base de datos\n");
		exec sql rollback;
		enterContinuar();
		return;
	}
	if (vello_sal_ind == 0) {
		printf("Salario actual do desenvolvedor: %g\n", vello_sal);
	} else {
		printf("O desenvolvedor non ten un salario asignado.\n");
	}
	printf("Salario a aumentar (opcional): "); novo_sal=get_float(VALIDATE_POSITIVE);

	if (novo_sal != -1) {
	 	

 		exec sql update desenvolvedor
			set salario = salario + :novo_sal
			where nss=:nss;
	}
	
	if(!erro){
		if (sqlca.sqlerrd[2])   
			printf("Desenvolvedor con salario modificado\n");
		else
			printf("Desenvolvedor non atopado\n");
		exec sql commit;
		enterContinuar();
	}

}


void buscar_xefes() {

	int erro=0;
	exec sql whenever sqlerror do erro=xestiona_errodml(1,"desenvolvedor");

	exec sql SET TRANSACTION READ ONLY;

	exec sql begin declare section;
		long nss;
		long cod_pro;
		char nome[30];
		float sal;
		short sal_ind;
		char tlf[20];
		char end[100];
	exec sql end declare section;

	exec sql declare c_xef cursor for
		select p.cod_pro, nss, d.nome, salario, telefono, enderezo
			from desenvolvedor d join proxecto p
			on d.nss = p.xefe_nss;

	EXEC SQL OPEN c_xef;
	EXEC SQL WHENEVER NOT FOUND DO BREAK;
	printf("\n\n");

	printf("+----------+--------+------------+-------------+----------------+-----------------------+\n");
	printf("| Proxecto |  NSS   |    Nome    |   Salario   | Teléfono Móbil |       Enderezo        |\n");
	printf("+----------+--------+------------+-------------+----------------+-----------------------+\n");
	while(1){
		EXEC SQL FETCH c_xef INTO :cod_pro, :nss, :nome, :sal:sal_ind, tlf, end;
		if (sal_ind==0)
		     printf("| %8ld | %6ld | %10.10s | %11g | %14.14s | %20.20s. |\n", 
				cod_pro, nss,rtrim(nome),sal,rtrim(tlf),rtrim(end));
		else
		     printf("| %8ld | %6ld | %10.10s | Sen salario | %14.14s | %20.20s. |\n", 
				cod_pro, nss,rtrim(nome),rtrim(tlf),rtrim(end));
	}
	printf("+----------+--------+------------+-------------+----------------+-----------------------+\n");
	EXEC SQL WHENEVER NOT FOUND continue;
	printf("\nXefes atopados: %d\n", sqlca.sqlerrd[2]);
	EXEC SQL CLOSE c_xef;
	printf("\n\n");
	if (!erro){
		EXEC SQL COMMIT;
		enterContinuar();
	}
		
}

void buscar_empregados_por_proxecto() {

	int erro=0;
	exec sql whenever sqlerror do erro=xestiona_errodml(1,"desenvolvedor");

	exec sql SET TRANSACTION READ ONLY;

	exec sql begin declare section;
		int cod_pro;
		long nss;
		char nome[30];
		float sal;
		short sal_ind;
		char tlf[20];
		char end[100];
	exec sql end declare section;

	printf("Código proxecto: "); cod_pro=get_int(VALIDATE_NOT_NULL | VALIDATE_POSITIVE);

	exec sql declare c_des_prox cursor for
		select d.nss, d.nome, salario, telefono, enderezo
			from desenvolvedor d join des_mod dm
			on d.nss = dm.nss
			where cod_pro = :cod_pro;

	EXEC SQL OPEN c_des_prox;
	EXEC SQL WHENEVER NOT FOUND DO BREAK;
	printf("\n\n");

	printf("+--------+------------+-------------+----------------+-----------------------+\n");
	printf("|  NSS   |    Nome:   |   Salario   | Teléfono Móbil |       Enderezo        |\n");
	printf("+--------+------------+-------------+----------------+-----------------------+\n");

	while(1){
		EXEC SQL FETCH c_des_prox INTO :nss, :nome, :sal:sal_ind, tlf, end;
		if (sal_ind==0)
		     printf("| %6ld | %10.10s | %11g | %14.14s | %20.20s. |\n", 
				nss,rtrim(nome),sal,rtrim(tlf),rtrim(end));
		else
		     printf("| %6ld | %10.10s | Sen salario | %14.14s | %20.20s. |\n", 
				nss,rtrim(nome),rtrim(tlf),rtrim(end));
	}
	EXEC SQL WHENEVER NOT FOUND continue;
	printf("+--------+------------+-------------+----------------+-----------------------+\n");
	printf("\nDesenvolvedores atopados: %d\n", sqlca.sqlerrd[2]);
	EXEC SQL CLOSE c_des_prox;
	printf("\n\n");
	if (!erro){
		EXEC SQL COMMIT;
		enterContinuar();
	}
		
}

void buscar_empregados_por_modulo() {

	int erro=0;
	exec sql whenever sqlerror do erro=xestiona_errodml(1,"desenvolvedor");

	exec sql SET TRANSACTION READ ONLY;

	exec sql begin declare section;
		int cod_pro;
		char nome_mod[16];
		long nss;
		char nome[30];
		float sal;
		short sal_ind;
		char tlf[20];
		char end[100];
	exec sql end declare section;

	printf("Código proxecto: "); cod_pro=get_int(VALIDATE_NOT_NULL | VALIDATE_POSITIVE);
	printf("Nome módulo: "); get_string(nome_mod, 16, VALIDATE_NOT_NULL);

	exec sql declare c_des_mod cursor for
		select d.nss, d.nome, salario, telefono, enderezo
			from desenvolvedor d join des_mod dm
			on d.nss = dm.nss
			where cod_pro = :cod_pro
			and dm.nome like :nome_mod;

	EXEC SQL OPEN c_des_mod;
	EXEC SQL WHENEVER NOT FOUND DO BREAK;
	printf("\n\n");
	printf("+--------+------------+-------------+----------------+-----------------------+\n");
	printf("|  NSS   |    Nome:   |   Salario   | Teléfono Móbil |       Enderezo        |\n");
	printf("+--------+------------+-------------+----------------+-----------------------+\n");

	while(1){
		EXEC SQL FETCH c_des_mod INTO :nss, :nome, :sal:sal_ind, tlf, end;
		if (sal_ind==0)
		     printf("| %6ld | %10.10s | %11g | %14.14s | %20.20s. |\n", 
				nss,rtrim(nome),sal,rtrim(tlf),rtrim(end));
		else
		     printf("| %6ld | %10.10s | Sen salario | %14.14s | %20.20s. |\n", 
				nss,rtrim(nome),rtrim(tlf),rtrim(end));
	}
	EXEC SQL WHENEVER NOT FOUND continue;
	printf("+--------+------------+-------------+----------------+-----------------------+\n");
	printf("\nDesenvolvedores atopados: %d\n", sqlca.sqlerrd[2]);
	EXEC SQL CLOSE c_des_mod;
	printf("\n\n");
	if (!erro){
		EXEC SQL COMMIT;
		enterContinuar();
	}
		
}


void listar_proxectos(){
	int erro=0;
	exec sql whenever sqlerror do erro=xestiona_errodml(1,"desenvolvedor");

	exec sql SET TRANSACTION READ ONLY;

	exec sql begin declare section;
		long cod_pro;
		char nome[16];
		long xefe_nss;
		short xefe_nssInd;
		char dataIni[20];
		char dataFin[100];
		short dataFinInd;
	exec sql end declare section;

	exec sql declare c_prox cursor for
		select cod_pro, nome, dataIni, dataFin, xefe_nss
			from proxecto;

	EXEC SQL OPEN c_prox;
	EXEC SQL WHENEVER NOT FOUND DO BREAK;
	printf("+--------+------------------+------------+------------+--------+\n");
	printf("| Código | Nome do proxecto |  Data ini  |  Data fin  |  Xefe  |\n");
	printf("+--------+------------------+------------+------------+--------+\n");
	while(1){
		EXEC SQL FETCH c_prox INTO :cod_pro, :nome, :dataIni, :dataFin:dataFinInd, :xefe_nss:xefe_nssInd;
		char xefe_nssString[7];
		xefe_nssString[0] = '\0';
		if (xefe_nssInd == 0){
			sprintf(xefe_nssString, "%6ld", xefe_nss);
		}
		printf("| %6ld | %16.16s | %10.10s | %10.10s | %6.6s |\n", 
				cod_pro, rtrim(nome), rtrim(dataIni), (dataFinInd == 0) ? rtrim(dataFin) : "", xefe_nssString);
	}

	EXEC SQL WHENEVER NOT FOUND continue;
	printf("+--------+------------------+------------+------------+--------+\n");
	printf("\nProxectos atopados: %d\n", sqlca.sqlerrd[2]);
	EXEC SQL CLOSE c_prox;

	if (!erro){
		EXEC SQL COMMIT;
		enterContinuar();
	}
}

/* Funci�n principal */
int main()
{
  conecta_bd();

  int op;

  while ( (op=menu()) != 0){
       switch(op){
            case 1: engadir_desenvolvedor(); break;
            case 2: eliminar_desenvolvedor(); break;
            case 3: detalle_desenvolvedor(); break;
            case 4: listar_desenvolvedores(0); break;
            case 5: modificar_salario(); break;
						case 6: modificar_salario_relativo(); break;
						case 7: engadir_proxecto(); break;
            case 8: nomear_xefe_proxecto(); break;
            case 9: modificar_data_fin(); break;
            case 10: engadir_modulo_proxecto(); break;
            case 11: borrar_modulo_proxecto(); break;
            case 12: listar_modulos(); break;
            case 13: asignar_empregado(); break;
            case 14: desasignar_empregado(); break;
            case 15: buscar_empregados_por_modulo(); break;
            case 16: buscar_empregados_por_proxecto(); break;
            case 17: buscar_xefes(); break;
						case 18: listar_proxectos(); break;
       }

  }
 


 desconecta_bd(); 

 return 0;
}



